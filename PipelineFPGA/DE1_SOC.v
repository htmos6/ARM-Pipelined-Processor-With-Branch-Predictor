
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC(

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [31:0] PC_out, RD1, RD2;
wire [31:0] Inst, currentBTA, ALUBranchAddressPlus4;
wire condEx, BranchTakenE ;
wire [3:0] Flags;
wire [1:0] FlagWrite;
wire [1:0] ForwardAE_o, ForwardBE_o;
wire StallE_o;
wire [1:0] PCSrcSelect;
	
topmodule topmodule (
	.clk(KEY[0]), .rst(~KEY[1]), .reset_bp(~KEY[2]),
	.PC_out(PC_out), .RD1(RD1), .RD2(RD2),
	.Inst(Inst), .currentBTA(currentBTA), .ALUBranchAddressPlus4(ALUBranchAddressPlus4),
	.condEx(condEx),
	.Flags(Flags), 
	.FlagWrite(FlagWrite),
	.ForwardAE_o(ForwardAE_o), .ForwardBE_o(ForwardBE_o),
	.StallF_o(LEDR[3]), .FlushD_o(LEDR[5]), .StallD_o(LEDR[4]), .FlushE_o(LEDR[6]), .StallE_o(StallE_o),
	.PCSrcSelect(PCSrcSelect),
	.BranchTakenE(LEDR[9]),
	.BranchE(LEDR[1]), .BranchPredictedE(LEDR[2]), .BranchPredicted(LEDR[0]), .hit(LEDR[7]), .branchPredictionResult(LEDR[8])
	);

hex_number_to_7_seg_converter S1 (.inp_hex_number(PC_out[3:0]), .out_hex_number(HEX0));
hex_number_to_7_seg_converter S2 (.inp_hex_number(PC_out[7:4]), .out_hex_number(HEX1));

hex_number_to_7_seg_converter S3 (.inp_hex_number(RD1[3:0]), .out_hex_number(HEX2));
hex_number_to_7_seg_converter S4 (.inp_hex_number(RD1[7:4]), .out_hex_number(HEX3));

hex_number_to_7_seg_converter S5 (.inp_hex_number(RD2[3:0]), .out_hex_number(HEX4));
hex_number_to_7_seg_converter S6 (.inp_hex_number(RD2[7:4]), .out_hex_number(HEX5));
//=======================================================
//  Structural coding
//=======================================================



endmodule
